// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(NotiAPIContext))]
    [Migration("20231017031210_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DescAccion")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Auditoria", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BlockChain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("HashGenerado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("IdAuditoria")
                        .HasColumnType("bigint");

                    b.Property<long>("IdHiloRespuesta")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTipoNotificacion")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdAuditoria");

                    b.HasIndex("IdHiloRespuesta");

                    b.HasIndex("IdTipoNotificacion");

                    b.ToTable("BlockChain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EstadoNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Formatos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreFormato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Formatos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.GenericosVsSubModulos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<long>("IdGenericos")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRol")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSubModulos")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdGenericos");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdSubModulos");

                    b.ToTable("GenericosVsSubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("HiloRespuestaNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MaestrosVsSubModulos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<long>("IdMaestro")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSubmodulo")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestro");

                    b.HasIndex("IdSubmodulo");

                    b.ToTable("MaestrosVsSubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificaciones", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AsuntoNotificacion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<long>("IdEstadoNotificacion")
                        .HasColumnType("bigint");

                    b.Property<long>("IdFormato")
                        .HasColumnType("bigint");

                    b.Property<long>("IdHiloRespuesta")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRadicado")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRequerimiento")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTipoNotificacion")
                        .HasColumnType("bigint");

                    b.Property<string>("TextoNotificacion")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<long?>("TipoNotificacionesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoNotificacion");

                    b.HasIndex("IdFormato");

                    b.HasIndex("IdHiloRespuesta");

                    b.HasIndex("IdRadicado");

                    b.HasIndex("IdRequerimiento");

                    b.HasIndex("TipoNotificacionesId");

                    b.ToTable("ModuloNotificaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestros", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreModulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ModulosMaestros", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PermisosGenericos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Radicados", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Core.Entities.RolVsMaestro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<long>("IdMaestro")
                        .HasColumnType("bigint");

                    b.Property<long>("IdRol")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestro");

                    b.HasIndex("IdRol");

                    b.ToTable("RolVsMaestro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreSubModulo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("SubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoNotificaciones", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoNotificaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaCreacion")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoRequerimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.BlockChain", b =>
                {
                    b.HasOne("Core.Entities.Auditoria", "Auditoria")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdAuditoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "HiloRespuestaNotificacion")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdHiloRespuesta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificaciones", "TipoNotificaciones")
                        .WithMany("BlockChains")
                        .HasForeignKey("IdTipoNotificacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditoria");

                    b.Navigation("HiloRespuestaNotificacion");

                    b.Navigation("TipoNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.GenericosVsSubModulos", b =>
                {
                    b.HasOne("Core.Entities.PermisosGenericos", "PermisosGenericos")
                        .WithMany("GenericosVsSubModulos")
                        .HasForeignKey("IdGenericos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("GenericosVsSubModulos")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MaestrosVsSubModulos", "MaestrosVsSubModulos")
                        .WithMany("GenericosVsSubModulos")
                        .HasForeignKey("IdSubModulos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaestrosVsSubModulos");

                    b.Navigation("PermisosGenericos");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Entities.MaestrosVsSubModulos", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestros", "ModulosMaestros")
                        .WithMany("MaestrosVsSubModulos")
                        .HasForeignKey("IdMaestro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SubModulos", "SubModulos")
                        .WithMany("MaestrosVsSubModulos")
                        .HasForeignKey("IdSubmodulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModulosMaestros");

                    b.Navigation("SubModulos");
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificaciones", b =>
                {
                    b.HasOne("Core.Entities.EstadoNotificacion", "EstadoNotificaciones")
                        .WithMany("ModulosNotificaciones")
                        .HasForeignKey("IdEstadoNotificacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Formatos", "Formatos")
                        .WithMany("ModulosNotificaciones")
                        .HasForeignKey("IdFormato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "HiloRespuestaNotificaciones")
                        .WithMany("ModulosNotificaciones")
                        .HasForeignKey("IdHiloRespuesta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Radicados", "Radicados")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdRadicado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoRequerimiento", "TiposRequerimiento")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdRequerimiento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificaciones", "TipoNotificaciones")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("TipoNotificacionesId");

                    b.Navigation("EstadoNotificaciones");

                    b.Navigation("Formatos");

                    b.Navigation("HiloRespuestaNotificaciones");

                    b.Navigation("Radicados");

                    b.Navigation("TipoNotificaciones");

                    b.Navigation("TiposRequerimiento");
                });

            modelBuilder.Entity("Core.Entities.RolVsMaestro", b =>
                {
                    b.HasOne("Core.Entities.ModulosMaestros", "ModulosMaestros")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("IdMaestro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModulosMaestros");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Navigation("BlockChains");
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Navigation("ModulosNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Formatos", b =>
                {
                    b.Navigation("ModulosNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("ModulosNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.MaestrosVsSubModulos", b =>
                {
                    b.Navigation("GenericosVsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.ModulosMaestros", b =>
                {
                    b.Navigation("MaestrosVsSubModulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Entities.PermisosGenericos", b =>
                {
                    b.Navigation("GenericosVsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.Radicados", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("GenericosVsSubModulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Entities.SubModulos", b =>
                {
                    b.Navigation("MaestrosVsSubModulos");
                });

            modelBuilder.Entity("Core.Entities.TipoNotificaciones", b =>
                {
                    b.Navigation("BlockChains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
